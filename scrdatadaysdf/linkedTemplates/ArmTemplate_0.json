{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "scrdatadaysdf"
		},
		"AzureSQLControlDB_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSQLControlDB'"
		},
		"SparkCompute_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'SparkCompute'"
		},
		"enterprisecloudstorage_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'enterprisecloudstorage'"
		},
		"iotcoll_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'iotcoll'"
		},
		"scrmlservice_servicePrincipalKey": {
			"type": "secureString",
			"metadata": "Secure string for 'servicePrincipalKey' of 'scrmlservice'"
		},
		"OnpremPostGres_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'OnpremPostGres'"
		},
		"enterprisecloudstorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://scrdatadayslake.dfs.core.windows.net"
		},
		"scrmlservice_properties_typeProperties_subscriptionId": {
			"type": "string",
			"defaultValue": "29223a3c-4017-4e62-9ba6-878f392b78e7"
		},
		"scrmlservice_properties_typeProperties_resourceGroupName": {
			"type": "string",
			"defaultValue": "scrdatadaysengg"
		},
		"scrmlservice_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "f33fda13-9dfc-460b-bf3c-786441d8cf55"
		},
		"scrmlservice_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "32abda43-c361-4230-987c-93d97394d623"
		},
		"EventTriggerscr_properties_RunSparkJob_parameters_copyFolder": {
			"type": "string",
			"defaultValue": "@triggerBody().folderPath"
		},
		"EventTriggerscr_properties_RunSparkJob_parameters_copyFile": {
			"type": "string",
			"defaultValue": "@triggerBody().fileName"
		},
		"EventTriggerscr_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/29223a3c-4017-4e62-9ba6-878f392b78e7/resourceGroups/scrdataaidays/providers/Microsoft.Storage/storageAccounts/scrdataaidays6208908056"
		},
		"onfilearrival_properties_RunSparkJob_parameters_copyFolder": {
			"type": "string",
			"defaultValue": "@triggerBody().folderPath"
		},
		"onfilearrival_properties_RunSparkJob_parameters_copyFile": {
			"type": "string",
			"defaultValue": "@triggerBody().fileName"
		},
		"onfilearrival_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/29223a3c-4017-4e62-9ba6-878f392b78e7/resourceGroups/scrdataaidays/providers/Microsoft.Storage/storageAccounts/scrdataaidays6208908056"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureSQLControlDB')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSQLControlDB_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SparkCompute')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://eastus.azuredatabricks.net",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('SparkCompute_accessToken')]"
					},
					"existingClusterId": "0123-195646-tutor788"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/enterprisecloudstorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('enterprisecloudstorage_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('enterprisecloudstorage_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/iotcoll')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": "[parameters('iotcoll_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/scrmlservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureMLService",
				"typeProperties": {
					"subscriptionId": "[parameters('scrmlservice_properties_typeProperties_subscriptionId')]",
					"resourceGroupName": "[parameters('scrmlservice_properties_typeProperties_resourceGroupName')]",
					"mlWorkspaceName": "scrmlprod",
					"servicePrincipalId": "[parameters('scrmlservice_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalKey": {
						"type": "SecureString",
						"value": "[parameters('scrmlservice_servicePrincipalKey')]"
					},
					"tenant": "[parameters('scrmlservice_properties_typeProperties_tenant')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/shintegrationruntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExecuteMLPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ScoreImages",
						"type": "AzureMLExecutePipeline",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"mlPipelineId": "fbb4f92c-5d1e-4c68-a270-71fc95549ee6",
							"experimentName": "batch_scoring_adf",
							"mlPipelineParameters": {
								"param_batch_size": "40"
							}
						},
						"linkedServiceName": {
							"referenceName": "scrmlservice",
							"type": "LinkedServiceReference"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/scrmlservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RunSparkJob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LoadSensorData",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/srram@dataaidays.net/createsparktableforreporting",
							"baseParameters": {
								"filename": {
									"value": "@pipeline().parameters.copyFile",
									"type": "Expression"
								},
								"filepath": {
									"value": "@pipeline().parameters.copyFolder",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SparkCompute",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"copyFolder": {
						"type": "string"
					},
					"copyFile": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SparkCompute')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabaseExternal_ControlTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "External control table to store high water mark value.",
				"linkedServiceName": {
					"referenceName": "AzureSQLControlDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"typeProperties": {
					"tableName": "watermarktable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQLControlDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabaseExternal_ControlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "External control table to store high water mark value.",
				"linkedServiceName": {
					"referenceName": "AzureSQLControlDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"typeProperties": {
					"tableName": "watermarktable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQLControlDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CosmosDbSqlApiCollection1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "iotcoll",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CosmosDbSqlApiCollection",
				"schema": {
					"type": "object",
					"properties": {
						"sensorTag": {
							"type": "string"
						},
						"humidity": {
							"type": "number"
						},
						"temperatureFromHumidity": {
							"type": "number"
						},
						"objectTemperature": {
							"type": "number"
						},
						"temperatureFromIr": {
							"type": "number"
						},
						"pressure": {
							"type": "number"
						},
						"lux": {
							"type": "number"
						},
						"currentTime": {
							"type": "string"
						},
						"year": {
							"type": "string"
						},
						"month": {
							"type": "string"
						},
						"day": {
							"type": "string"
						},
						"hour": {
							"type": "integer"
						},
						"compkey": {
							"type": "integer"
						},
						"_lsn": {
							"type": "integer"
						},
						"_metadata": {
							"type": "object"
						}
					}
				},
				"typeProperties": {
					"collectionName": "sensordata"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/iotcoll')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_eqk')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "enterprisecloudstorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "orders",
						"fileSystem": "rawdata"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/enterprisecloudstorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/target')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "enterprisecloudstorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "output",
						"fileSystem": "cosmosoutput"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/enterprisecloudstorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OnpremPostGres')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "PostgreSql",
				"typeProperties": {
					"connectionString": "[parameters('OnpremPostGres_connectionString')]"
				},
				"connectVia": {
					"referenceName": "shintegrationruntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/shintegrationruntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_eqk')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OnpremPostGres",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "PostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "public",
					"table": "orders"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OnpremPostGres')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EventTriggerscr')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "RunSparkJob",
							"type": "PipelineReference"
						},
						"parameters": {
							"copyFolder": "[parameters('EventTriggerscr_properties_RunSparkJob_parameters_copyFolder')]",
							"copyFile": "[parameters('EventTriggerscr_properties_RunSparkJob_parameters_copyFile')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/samples/blobs/",
					"blobPathEndsWith": ".csv",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('EventTriggerscr_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/RunSparkJob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/onfilearrival')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "RunSparkJob",
							"type": "PipelineReference"
						},
						"parameters": {
							"copyFolder": "[parameters('onfilearrival_properties_RunSparkJob_parameters_copyFolder')]",
							"copyFile": "[parameters('onfilearrival_properties_RunSparkJob_parameters_copyFile')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/samples/blobs/",
					"blobPathEndsWith": ".csv",
					"scope": "[parameters('onfilearrival_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/RunSparkJob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadFromCosmos')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CosmosDbSqlApiCollection1",
								"type": "DatasetReference"
							},
							"name": "iotdata",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "target",
								"type": "DatasetReference"
							},
							"name": "LoadtoDatalake"
						}
					],
					"transformations": [
						{
							"name": "Projection"
						}
					],
					"script": "source(output(\n\t\t{_lsn} as integer,\n\t\t{_metadata} as ({} as string),\n\t\tcompkey as integer,\n\t\tcurrentTime as string,\n\t\tday as string,\n\t\thour as integer,\n\t\thumidity as double,\n\t\tlux as double,\n\t\tmonth as string,\n\t\tobjectTemperature as double,\n\t\tpressure as double,\n\t\tsensorTag as string,\n\t\ttemperatureFromHumidity as double,\n\t\ttemperatureFromIr as double,\n\t\tyear as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tformat: 'document',\n\tpartitionBy('key',\n\t\t0,\n\t\tcompkey\n\t)) ~> iotdata\niotdata select(mapColumn(\n\t\tsensorTag,\n\t\thumidity,\n\t\ttemperatureFromHumidity,\n\t\tobjectTemperature,\n\t\ttemperatureFromIr,\n\t\tpressure,\n\t\tlux,\n\t\tcurrentTime,\n\t\tyear,\n\t\tmonth,\n\t\tday,\n\t\thour,\n\t\tcompkey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Projection\nProjection sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['output.csv'],\n\ttruncate: true,\n\tpartitionBy('hash', 1)) ~> LoadtoDatalake"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CosmosDbSqlApiCollection1')]",
				"[concat(variables('factoryId'), '/datasets/target')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DeltaCopyfromPostGres')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "LookupLastWaterMark",
						"description": "Retrieve  the last high-watermark value stored in external control table",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": {
									"value": "select @{pipeline().parameters.Control_Table_Column_Name} as WatermarkValue from @{pipeline().parameters.Control_Table_Table_Name}",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "AzureSqlDatabaseExternal_ControlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "DeltaCopyfromDB",
						"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupLastWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupCurrentWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource",
								"query": {
									"value": "select * from @{pipeline().parameters.Data_Source_Table_Name} where @{pipeline().parameters.Data_Source_WaterMarkColumn} > '@{activity('LookupLastWaterMark').output.firstRow.WatermarkValue}' and @{pipeline().parameters.Data_Source_WaterMarkColumn} <= '@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}'",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_eqk",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_eqk",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "UpdateWaterMark",
						"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "DeltaCopyfromDB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[update_watermark]",
							"storedProcedureParameters": {
								"LastModifiedtime": {
									"value": {
										"value": "@activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue",
										"type": "Expression"
									},
									"type": "datetime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSQLControlDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LookupCurrentWaterMark",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource",
								"query": {
									"value": "select max(@{pipeline().parameters.Data_Source_WaterMarkColumn}) as NewWatermarkValue from @{pipeline().parameters.Data_Source_Table_Name}",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "SourceDataset_eqk",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "orders"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "order_date"
					},
					"Data_Destination_Folder_Path": {
						"type": "String",
						"defaultValue": "/rawdata/orders/"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "watermarktable"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "WatermarkValue"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlDatabaseExternal_ControlTable1')]",
				"[concat(variables('factoryId'), '/datasets/SourceDataset_eqk')]",
				"[concat(variables('factoryId'), '/datasets/DestinationDataset_eqk')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQLControlDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Extract_OnPremData')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Coppy_postgres_to_datalake",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "public.orders"
							},
							{
								"name": "Destination",
								"value": "rawdata//"
							}
						],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "order_id",
											"type": "Int16"
										},
										"sink": {
											"name": "order_id",
											"type": "Int16"
										}
									},
									{
										"source": {
											"name": "customer_id",
											"type": "String"
										},
										"sink": {
											"name": "customer_id",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "employee_id",
											"type": "Int16"
										},
										"sink": {
											"name": "employee_id",
											"type": "Int16"
										}
									},
									{
										"source": {
											"name": "order_date",
											"type": "DateTime"
										},
										"sink": {
											"name": "order_date",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "required_date",
											"type": "DateTime"
										},
										"sink": {
											"name": "required_date",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "shipped_date",
											"type": "DateTime"
										},
										"sink": {
											"name": "shipped_date",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "ship_via",
											"type": "Int16"
										},
										"sink": {
											"name": "ship_via",
											"type": "Int16"
										}
									},
									{
										"source": {
											"name": "freight",
											"type": "Single"
										},
										"sink": {
											"name": "freight",
											"type": "Single"
										}
									},
									{
										"source": {
											"name": "ship_name",
											"type": "String"
										},
										"sink": {
											"name": "ship_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ship_address",
											"type": "String"
										},
										"sink": {
											"name": "ship_address",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ship_city",
											"type": "String"
										},
										"sink": {
											"name": "ship_city",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ship_region",
											"type": "String"
										},
										"sink": {
											"name": "ship_region",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ship_postal_code",
											"type": "String"
										},
										"sink": {
											"name": "ship_postal_code",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ship_country",
											"type": "String"
										},
										"sink": {
											"name": "ship_country",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_eqk",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_eqk",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_eqk')]",
				"[concat(variables('factoryId'), '/datasets/DestinationDataset_eqk')]"
			]
		}
	]
}