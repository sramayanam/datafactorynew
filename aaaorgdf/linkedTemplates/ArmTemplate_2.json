{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "aaaorgdf"
		},
		"onfilearrival_properties_RunSparkJob_parameters_copyFolder": {
			"type": "string",
			"defaultValue": "@triggerBody().folderPath"
		},
		"onfilearrival_properties_RunSparkJob_parameters_copyFile": {
			"type": "string",
			"defaultValue": "@triggerBody().fileName"
		},
		"onfilearrival_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/29223a3c-4017-4e62-9ba6-878f392b78e7/resourceGroups/scrdataaidays/providers/Microsoft.Storage/storageAccounts/scrdataaidays6208908056"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/onfilearrival')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "RunSparkJob",
							"type": "PipelineReference"
						},
						"parameters": {
							"copyFolder": "[parameters('onfilearrival_properties_RunSparkJob_parameters_copyFolder')]",
							"copyFile": "[parameters('onfilearrival_properties_RunSparkJob_parameters_copyFile')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/samples/blobs/",
					"blobPathEndsWith": ".csv",
					"scope": "[parameters('onfilearrival_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadFromCosmos')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CosmosDbSqlApiCollection1",
								"type": "DatasetReference"
							},
							"name": "iotdata"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "target",
								"type": "DatasetReference"
							},
							"name": "LoadtoDatalake"
						}
					],
					"transformations": [
						{
							"name": "Projection"
						}
					],
					"script": "source(output(\n\t\t{_lsn} as integer,\n\t\t{_metadata} as ({} as string),\n\t\tcompkey as integer,\n\t\tcurrentTime as string,\n\t\tday as string,\n\t\thour as integer,\n\t\thumidity as double,\n\t\tlux as double,\n\t\tmonth as string,\n\t\tobjectTemperature as double,\n\t\tpressure as double,\n\t\tsensorTag as string,\n\t\ttemperatureFromHumidity as double,\n\t\ttemperatureFromIr as double,\n\t\tyear as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tformat: 'document',\n\tpartitionBy('key',\n\t\t0,\n\t\tcompkey\n\t)) ~> iotdata\niotdata select(mapColumn(\n\t\tsensorTag,\n\t\thumidity,\n\t\ttemperatureFromHumidity,\n\t\tobjectTemperature,\n\t\ttemperatureFromIr,\n\t\tpressure,\n\t\tlux,\n\t\tcurrentTime,\n\t\tyear,\n\t\tmonth,\n\t\tday,\n\t\thour,\n\t\tcompkey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Projection\nProjection sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['output.csv'],\n\ttruncate: true,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tpartitionBy('hash', 1)) ~> LoadtoDatalake"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy data from on premise SQL Server to fabric')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy data from on premise SQL Server to SQL Azure.\n\nYou can also go to \"Copy Data Tool\" to get the pipeline for more connectors and scenarios.",
				"activities": [
					{
						"name": "SQL_to_fabric",
						"description": "Copy data from SQL server to SQL Azure",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"isolationLevel": "ReadCommitted",
								"partitionOption": "None"
							},
							"sink": {
								"type": "LakehouseTableSink",
								"tableActionOption": "Append"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "LakehouseTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DeltaCopyfromPostGres')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "LookupLastWaterMark",
						"description": "Retrieve  the last high-watermark value stored in external control table",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": {
									"value": "select @{pipeline().parameters.Control_Table_Column_Name} as WatermarkValue from @{pipeline().parameters.Control_Table_Table_Name}",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabaseExternal_ControlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "DeltaCopyfromDB",
						"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupLastWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupCurrentWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource",
								"query": {
									"value": "select * from @{pipeline().parameters.Data_Source_Table_Name} where @{pipeline().parameters.Data_Source_WaterMarkColumn} > '@{activity('LookupLastWaterMark').output.firstRow.WatermarkValue}' and @{pipeline().parameters.Data_Source_WaterMarkColumn} <= '@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}'",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_eqk",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_eqk",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "UpdateWaterMark",
						"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "DeltaCopyfromDB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[update_watermark]",
							"storedProcedureParameters": {
								"LastModifiedtime": {
									"value": {
										"value": "@activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue",
										"type": "Expression"
									},
									"type": "datetime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSQLControlDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LookupCurrentWaterMark",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource",
								"query": {
									"value": "select max(@{pipeline().parameters.Data_Source_WaterMarkColumn}) as NewWatermarkValue from @{pipeline().parameters.Data_Source_Table_Name}",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "SourceDataset_eqk",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "orders"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "order_date"
					},
					"Data_Destination_Folder_Path": {
						"type": "String",
						"defaultValue": "/rawdata/orders/"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "watermarktable"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "WatermarkValue"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Extract_OnPremData')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Coppy_postgres_to_datalake",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "public.orders"
							},
							{
								"name": "Destination",
								"value": "rawdata//"
							}
						],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "order_id",
											"type": "Int16"
										},
										"sink": {
											"name": "order_id",
											"type": "Int16"
										}
									},
									{
										"source": {
											"name": "customer_id",
											"type": "String"
										},
										"sink": {
											"name": "customer_id",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "employee_id",
											"type": "Int16"
										},
										"sink": {
											"name": "employee_id",
											"type": "Int16"
										}
									},
									{
										"source": {
											"name": "order_date",
											"type": "DateTime"
										},
										"sink": {
											"name": "order_date",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "required_date",
											"type": "DateTime"
										},
										"sink": {
											"name": "required_date",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "shipped_date",
											"type": "DateTime"
										},
										"sink": {
											"name": "shipped_date",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "ship_via",
											"type": "Int16"
										},
										"sink": {
											"name": "ship_via",
											"type": "Int16"
										}
									},
									{
										"source": {
											"name": "freight",
											"type": "Single"
										},
										"sink": {
											"name": "freight",
											"type": "Single"
										}
									},
									{
										"source": {
											"name": "ship_name",
											"type": "String"
										},
										"sink": {
											"name": "ship_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ship_address",
											"type": "String"
										},
										"sink": {
											"name": "ship_address",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ship_city",
											"type": "String"
										},
										"sink": {
											"name": "ship_city",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ship_region",
											"type": "String"
										},
										"sink": {
											"name": "ship_region",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ship_postal_code",
											"type": "String"
										},
										"sink": {
											"name": "ship_postal_code",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ship_country",
											"type": "String"
										},
										"sink": {
											"name": "ship_country",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_eqk",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_eqk",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MappingDataFlow_Cosmos')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LoadFromCosmos",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "LoadFromCosmos",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"iotdata": {},
									"LoadtoDatalake": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/LoadFromCosmos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bulkcopytofabric')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.tablename",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "LakehouseWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SqlServerTableparam",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DelimitedText2",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"tablename": {
						"type": "array",
						"defaultValue": [
							"DimAccount",
							"DimCurrency",
							"DimCustomer",
							"DimDate",
							"DimDepartmentGroup",
							"DimEmployee",
							"DimGeography",
							"DimOrganization",
							"DimProduct",
							"DimProductCategory",
							"DimProductSubcategory",
							"DimPromotion",
							"DimReseller",
							"DimSalesReason",
							"DimSalesTerritory",
							"DimScenario"
						]
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/bulkcopytopgsql')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ProductKey",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "productkey",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "ProductAlternateKey",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "productalternatekey",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "ProductSubcategoryKey",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "productsubcategorykey",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "WeightUnitMeasureCode",
											"type": "String",
											"physicalType": "nchar"
										},
										"sink": {
											"name": "weightunitmeasurecode",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "SizeUnitMeasureCode",
											"type": "String",
											"physicalType": "nchar"
										},
										"sink": {
											"name": "sizeunitmeasurecode",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "EnglishProductName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "englishproductname",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "SpanishProductName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "spanishproductname",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "FrenchProductName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "frenchproductname",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "StandardCost",
											"type": "Decimal",
											"physicalType": "money",
											"scale": 4,
											"precision": 19
										},
										"sink": {
											"name": "standardcost",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "FinishedGoodsFlag",
											"type": "Boolean",
											"physicalType": "bit"
										},
										"sink": {
											"name": "finishedgoodsflag",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "Color",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "color",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "SafetyStockLevel",
											"type": "Int16",
											"physicalType": "smallint"
										},
										"sink": {
											"name": "safetystocklevel",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "ReorderPoint",
											"type": "Int16",
											"physicalType": "smallint"
										},
										"sink": {
											"name": "reorderpoint",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "ListPrice",
											"type": "Decimal",
											"physicalType": "money",
											"scale": 4,
											"precision": 19
										},
										"sink": {
											"name": "listprice",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "Size",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "size",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "SizeRange",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "sizerange",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "Weight",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "weight",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "DaysToManufacture",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "daystomanufacture",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "ProductLine",
											"type": "String",
											"physicalType": "nchar"
										},
										"sink": {
											"name": "productline",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "DealerPrice",
											"type": "Decimal",
											"physicalType": "money",
											"scale": 4,
											"precision": 19
										},
										"sink": {
											"name": "dealerprice",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "Class",
											"type": "String",
											"physicalType": "nchar"
										},
										"sink": {
											"name": "class",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "Style",
											"type": "String",
											"physicalType": "nchar"
										},
										"sink": {
											"name": "style",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "ModelName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "modelname",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "LargePhoto",
											"type": "Byte[]",
											"physicalType": "varbinary"
										},
										"sink": {
											"name": "largephoto",
											"type": "Byte[]",
											"physicalType": "bytea"
										}
									},
									{
										"source": {
											"name": "EnglishDescription",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "englishdescription",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "FrenchDescription",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "frenchdescription",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "ChineseDescription",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "chinesedescription",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "ArabicDescription",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "arabicdescription",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "HebrewDescription",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "hebrewdescription",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "ThaiDescription",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "thaidescription",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "GermanDescription",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "germandescription",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "JapaneseDescription",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "japanesedescription",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "TurkishDescription",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "turkishdescription",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "StartDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "startdate",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "EndDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "enddate",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "Status",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "status",
											"type": "String",
											"physicalType": "character varying"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SqlServerDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzurePostgreSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"tablename": {
						"type": "array",
						"defaultValue": [
							"factinternetsales",
							"dimproduct"
						]
					}
				},
				"annotations": []
			},
			"dependsOn": []
		}
	]
}