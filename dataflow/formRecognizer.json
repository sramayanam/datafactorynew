{
	"name": "formRecognizer",
	"properties": {
		"description": "This dataflow takes the output from Form Recognizer and extracts the table information to a storage sink.\nThis specifically works with the Form Recognizer Layout API. You can also save the transformations as a flowlet if you would like to reuse the logic in other dataflows. ",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "RestService1",
						"type": "LinkedServiceReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "flatten1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "flatten2"
				},
				{
					"name": "filter1"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "rank1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     OutputFolder as string",
				"}",
				"source(output(",
				"          body as (analyzeResult as (pageResults as (page as short, tables as (boundingBox as double[], cells as (boundingBox as double[], columnIndex as short, elements as string[], isHeader as boolean, rowIndex as short, text as string)[], columns as short, rows as short)[])[], readResults as (angle as boolean, height as short, lines as (appearance as (style as (confidence as double, name as string)), boundingBox as double[], text as string, words as (boundingBox as double[], confidence as double, text as string)[])[], page as short, unit as string, width as double)[], version as string), createdDateTime as timestamp, lastUpdatedDateTime as timestamp, status as string),",
				"          headers as [string,string]",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     format: 'rest',",
				"     timeout: 30,",
				"     requestInterval: 0,",
				"     httpMethod: 'GET',",
				"     paginationRules: ['supportRFC5988' -> 'true'],",
				"     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> source1",
				"source1 foldDown(unroll(body.analyzeResult.pageResults.tables),",
				"     mapColumn(",
				"          page = body.analyzeResult.pageResults.page,",
				"          cells = body.analyzeResult.pageResults.tables.cells,",
				"          columns = body.analyzeResult.pageResults.tables.columns,",
				"          rows = body.analyzeResult.pageResults.tables.rows",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"flatten2 aggregate(groupBy(TableNum,",
				"          rowIndex),",
				"     text = replace(trim(trim(toString(collect(text)), '['),']'),'\"','')) ~> aggregate1",
				"rank1 foldDown(unroll(cells),",
				"     mapColumn(",
				"          page,",
				"          TableNum,",
				"          columnIndex = cells.columnIndex,",
				"          isHeader = cells.isHeader,",
				"          rowIndex = cells.rowIndex,",
				"          text = cells.text",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten2",
				"flatten1 filter(not(isNull(cells))) ~> filter1",
				"aggregate1 aggregate(groupBy(tableNum = 'TableNumber'+toString(TableNum)),",
				"     text = replace(reduce(collect(text), '', #acc+#item+'\\n',#result),'\"','')) ~> aggregate2",
				"filter1 rank(asc(page, true),",
				"     asc(cells, true),",
				"     output(TableNum as long)) ~> rank1",
				"aggregate2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {_col0_} as string",
				"     ),",
				"     format: 'delimited',",
				"     fileSystem: ($OutputFolder),",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: false,",
				"     rowUrlColumn:'tableNum',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     quoteAll: true,",
				"     saveOrder: 1,",
				"     mapColumn(",
				"          {_col0_} = text",
				"     )) ~> sink1"
			]
		}
	}
}